package es.lifevit.sdk;

import android.content.Context;
import android.util.Log;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import es.lifevit.sdk.bracelet.LifevitSDKResponse;
import es.lifevit.sdk.bracelet.LifevitSDKVitalECGWaveform;
import es.lifevit.sdk.listeners.LifevitSDKBraceletVitalListener;

import static org.junit.Assert.assertEquals;

/**
 * Instrumentation test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {

    private static final String TAG = ExampleInstrumentedTest.class.getSimpleName();


    @Test
    public void test_ecg_packet() throws Exception {

        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();

        LifevitSDKManager manager = new LifevitSDKManager(appContext);
        manager.setBraceletVitalListener(new LifevitSDKBraceletVitalListener() {
            @Override
            public void braceletVitalSOS(String device) {

            }

            @Override
            public void braceletVitalOperation(String device, LifevitSDKConstants.BraceletVitalOperation operation) {
            }

            @Override
            public void braceletVitalInformation(String device, LifevitSDKResponse message) {
                if (message.getCommand() == LifevitSDKConstants.BraceletVitalCommand.GET_ECG_WAVEFORM) {
                    LifevitSDKVitalECGWaveform waveform = (LifevitSDKVitalECGWaveform) message.getData();
                    Log.d(TAG, waveform.toString());
                    assertEquals(228, waveform.getEcgData().size());
                }
            }

            @Override
            public void braceletVitalError(String device, LifevitSDKConstants.BraceletVitalError error, LifevitSDKConstants.BraceletVitalCommand command) {

            }
        });

        LifevitSDKBleDeviceBraceletVital braceletVital = new LifevitSDKBleDeviceBraceletVital(null, manager);

        int bytes[] = {0x71, 0x00, 0x00, 0x21, 0x11, 0x30, 0x07, 0x49, 0x22, 0xb0,
                0x38, 0x65, 0x84, 0x10, 0x01, 0x1d, 0x00, 0x85, 0x00, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x89, 0xc2, 0xef,
                0xb4, 0xe9, 0xca, 0x45, 0xfc, 0x56, 0x2a, 0x49, 0x35, 0xad,
                0x1e, 0x2e, 0x00, 0x0b, 0xf6, 0xb5, 0x00, 0x96, 0x0c, 0x90,
                0x04, 0xd9, 0x01, 0xfa, 0xfe, 0x98, 0xea, 0xb1, 0xcd, 0x62,
                0xbe, 0xad, 0xce, 0x92, 0xed, 0x4d, 0xf7, 0xd8, 0xe3, 0xec,
                0xc5, 0x90, 0xbf, 0xbe, 0xd4, 0x0b, 0xf4, 0xb8, 0x02, 0x47,
                0xf1, 0x5f, 0xcb, 0xb1, 0xad, 0xe8, 0xa9, 0xad, 0xcd, 0xfb,
                0xfb, 0x4f, 0x14, 0x53, 0x01, 0xf5, 0xd0, 0xf2, 0xaa, 0xd3,
                0xad, 0x15, 0xdb, 0xe2, 0x0b, 0x63, 0x24, 0x25, 0x17, 0xdd,
                0xf8, 0x7a, 0xe4, 0x36, 0xea, 0xa1, 0x04, 0x49, 0x19, 0xe4,
                0x22, 0x66, 0x20, 0x96, 0x1b, 0x23, 0x16, 0x70, 0x0a, 0x33,
                0xf8, 0x8f, 0xe9, 0x39, 0xf2, 0x18, 0x0c, 0x21, 0x1e, 0x4e,
                0x0f, 0x96, 0xee, 0x9b, 0xdf, 0x9e, 0xf9, 0x9d, 0x24, 0xd5,
                0x2d, 0x87, 0x01, 0xc0, 0xbc, 0xd1, 0x92, 0x9e, 0x9c, 0x3d,
                0xe0, 0x3f, 0x3b, 0x49, 0x87, 0x96, 0x94, 0xb6, 0x58, 0xcc,
                0x01, 0x95, 0xd3, 0xcd, 0xe7, 0x1f, 0x0f, 0x3b, 0x14, 0x38,
                0xf4, 0x8e, 0xe3, 0x8b, 0xfb, 0x66, 0x1a, 0x92, 0x12, 0xd5,
                0xee, 0xc2, 0xe9, 0x9b, 0x10, 0xc5, 0x34, 0x31, 0x27, 0x90,
                0xfa, 0x25, 0xec, 0x05, 0x13, 0x68, 0x36, 0x6b, 0x19, 0x15,
                0xc5, 0xc3, 0x7b, 0xab, 0x7b, 0x6d, 0xbe, 0x4e, 0x12, 0xd2,
                0x46, 0xe9, 0x4c, 0xe0, 0x27, 0xcd, 0xe3, 0x54, 0xa5, 0xd7,
                0x9a, 0x99, 0xd2, 0xdc, 0x22, 0xe2, 0x48, 0x0b, 0x2a, 0xab,
                0xf4, 0x65, 0xe7};

        int bytes2[] = {0x71, 0x01, 0x00, 0x96, 0x0b, 0x0a, 0x31, 0x80, 0x2e, 0x3b,
                0x0d, 0x42, 0x00, 0x9d, 0x1a, 0x37, 0x3e, 0x86, 0x41, 0xf5,
                0x1e, 0x26, 0xf6, 0x81, 0xde, 0xf3, 0xe0, 0xaf, 0xf2, 0xef,
                0x06, 0x07, 0x0e, 0xf2, 0xfa, 0xf5, 0xd3, 0x42, 0xb9, 0x63,
                0xc8, 0x85, 0xf1, 0x75, 0x07, 0x69, 0xf1, 0xcb, 0xcf, 0xff,
                0xd1, 0xbf, 0x03, 0x0d, 0x32, 0xc5, 0x31, 0x29, 0x09, 0x33,
                0xec, 0xb5, 0xf3, 0xf8, 0x04, 0x30, 0xfd, 0xe9, 0xe3, 0xc2,
                0xe2, 0x44, 0x0d, 0xc2, 0x3d, 0x47, 0x42, 0x35, 0x1b, 0x0a,
                0xff, 0x37, 0x13, 0xee, 0x41, 0x77, 0x4a, 0x0e, 0x1a, 0x20,
                0xda, 0xc0, 0xc5, 0xe6, 0xe8, 0x24, 0x10, 0x6e, 0x19, 0xb5,
                0x02, 0xc0, 0xf7, 0x5c, 0x0d, 0x5d, 0x30, 0xf5, 0x32, 0x4c,
                0x0f, 0x45, 0xe1, 0xd9, 0xd8, 0xce, 0xfb, 0x76, 0x21, 0x80,
                0x25, 0xb6, 0x0a, 0xba, 0xf9, 0xb8, 0x03, 0x32, 0x1a, 0x86,
                0x1e, 0x4f, 0x0e, 0xa7, 0x02, 0x14, 0x06, 0x9a, 0x0e, 0xd0,
                0x16, 0x39, 0x1f, 0x50, 0x2b, 0x77, 0x22, 0x2c, 0xf3, 0x43,
                0xb2, 0xe6, 0x92, 0xb8, 0xae, 0x1d, 0xe0, 0x68, 0xfb, 0x11,
                0x00, 0x7a, 0x0f, 0x5d, 0x33, 0x36, 0x45, 0x9a, 0x26, 0x2b,
                0xf8, 0x0c, 0xf4, 0x38, 0x21, 0x5c, 0x3c, 0x99, 0x11, 0xad,
                0xb7, 0x56, 0x86, 0x26, 0xaa, 0xa2, 0x03, 0xe2, 0x3d, 0xba,
                0x33, 0xc3, 0x00, 0x0e, 0xde, 0x6b, 0xe7, 0xf5, 0x05, 0x8e,
                0x1f, 0x39, 0x22, 0x5a, 0x0f, 0xf1, 0xee, 0x4c, 0xc0, 0x9f,
                0x96, 0x34, 0x8c, 0x80, 0xbb, 0x85, 0x0d, 0xbe, 0x43, 0xc2,
                0x2d, 0x24, 0xda, 0x4e, 0x90, 0xb6, 0x8f, 0x41, 0xd2, 0x23,
                0x1f, 0xee, 0x3a, 0x22, 0x22, 0x27, 0xf8, 0x57, 0xdf, 0x79,
                0xe0, 0x58, 0xee};

        int bytes3[] = {0x71, 0x02, 0xFF};

        braceletVital.processECGWaveformData(convertToBytes(bytes));
        braceletVital.processECGWaveformData(convertToBytes(bytes2));
        braceletVital.processECGWaveformData(convertToBytes(bytes3));
    }

    private byte[] convertToBytes(int[] intBytes) {
        byte[] result = new byte[intBytes.length];
        for (int i = 0; i < intBytes.length; i++) {
            result[i] = (byte) intBytes[i];
        }
        return result;
    }

}
